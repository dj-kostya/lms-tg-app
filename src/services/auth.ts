/**
 * API —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */


export interface AuthResponse {
  verified: boolean;
  user?: {
    allows_write_to_pm: boolean;
    first_name: string;
    id: number;
    is_premium: boolean;
    last_name?: string;
    language_code: string;
    photo_url?: string;
    username?: string;
  };
  auth_date?: string;
  user_id?: number;
  user_name?: string;
  is_authenticated: boolean;
}

export interface LoginRequest {
  initData: string;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Init Data
 * @param initData - Telegram Init Data —Å—Ç—Ä–æ–∫–∞
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export async function login(initData: string): Promise<AuthResponse> {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const isDevelopment = import.meta.env.DEV;
    const apiUrl = isDevelopment 
      ? '/api/user/login' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
      : 'https://n8n.tg.knosorev.ru/webhook/api/user/login'; // –ü—Ä—è–º–æ–π URL –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    
    
    console.log('üöÄ Sending login request to:', apiUrl);
    console.log('üìù Init data string:', initData);
    console.log('üîß Is development mode:', isDevelopment);
    
    const requestHeaders = {
      'Content-Type': 'application/json',
      'X-TG-INIT-DATA': initData, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º raw init data —Å—Ç—Ä–æ–∫—É
    };
    
    console.log('üì§ Request headers:', requestHeaders);
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      mode: 'cors',
      headers: requestHeaders,
      body: JSON.stringify({ initData: initData }), // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ body –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = (await response.json()) as unknown as AuthResponse;
    console.log('üì• Auth response:', data);
    return data;
  } catch (error) {
    console.error('Auth login error:', error);
    return {
      verified: false,
      is_authenticated: false,
    };
  }
}

