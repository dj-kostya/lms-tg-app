name: CI â€¢ Lint, Build, Deploy (Server optional + GitHub Pages)

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to (server)"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - prod

env:
  APP_NAME: lms-tg-app
  DOCKER_IMAGE: ${{ github.repository }}:${{ github.ref }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  build:
    name: Lint & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image with docker-compose
        run: |
          docker build -f deploy/Dockerfile -t ${{ env.DOCKER_IMAGE }} .
          docker tag ${{ env.DOCKER_IMAGE }} ${{ env.DOCKER_IMAGE }}-$(date +%Y%m%d-%H%M%S)

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }} | gzip > lms-tg-app.${{ github.ref }}.tar.gz

      - name: Upload server deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.ref}}
          path: |
            lms-tg-app.${{ github.ref }}.tar.gz
          retention-days: 2

  deploy-to-server:
    name: Deploy to server
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ github.ref}}
          path: ./

      - name: List artifacts
        run: ls -la

      - name: Prepare server directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            mkdir -p /opt/deploy/lms-tg-app
            cd /opt/deploy/lms-tg-app
            docker-compose -f deploy/docker-compose.${{ env.ENVIRONMENT }}.yml down --remove-orphans || true
            docker rmi ${{ env.DOCKER_IMAGE }} || true

      - name: Copy files to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: |
            lms-tg-app.${{ github.ref }}.tar.gz,
            deploy/docker-compose.${{ env.ENVIRONMENT }}.yml
          target: "/opt/deploy/lms-tg-app/"

      - name: Deploy with docker-compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /opt/deploy/lms-tg-app
            docker load < lms-tg-app.${{ github.ref }}.tar.gz
            docker-compose -f deploy/docker-compose.${{ env.ENVIRONMENT }}.yml up -d
            sleep 15
            docker-compose -f deploy/docker-compose.${{ env.ENVIRONMENT }}.yml ps
            if [ "${{ env.ENVIRONMENT }}" = "staging" ]; then
              curl -f http://localhost:3001/health || echo "Health check failed"
            else
              curl -f http://localhost:3000/health || echo "Health check failed"
            fi
            docker image prune -f
            rm -f lms-tg-app.${{ github.ref }}.tar.gz
