name: Deploy to Server

on:
  push:
    branches: ["master", "main"]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  APP_NAME: lms-tg-app
  DOCKER_IMAGE: ${{ github.repository }}:${{ github.event.inputs.environment || 'production' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install spec dependencies
        run: npm ci
        working-directory: spec

      - name: Generate TypeSpec
        run: npx tsp compile . --output-dir ../tsp-output
        working-directory: spec

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create environment file
        run: |
          cp deploy/env.${{ env.ENVIRONMENT }} deploy/.env
          echo "NODE_ENV=${{ env.ENVIRONMENT }}" >> deploy/.env
          echo "APP_NAME=${{ env.APP_NAME }}" >> deploy/.env
          echo "DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}" >> deploy/.env

      - name: Build Docker image with docker-compose
        run: |
          docker compose -f deploy/docker-compose.${{ env.ENVIRONMENT }}.yml build --no-cache
          docker tag ${{ env.DOCKER_IMAGE }} ${{ env.DOCKER_IMAGE }}:$(date +%Y%m%d-%H%M%S)

      - name: Save Docker image
        run: |
          docker save ${{ env.DOCKER_IMAGE }} | gzip > ${{ env.APP_NAME }}.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.APP_NAME }}.tar.gz
          retention-days: 1

      - name: Upload docker-compose files
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-files
          path: |
            deploy/docker-compose.${{ env.ENVIRONMENT }}.yml
            deploy/.env
            deploy/deploy.sh
            deploy/nginx.conf
            deploy/env.${{ env.ENVIRONMENT }}
          retention-days: 1

      - name: Prepare server directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            mkdir -p /opt/${{ env.APP_NAME }}
            cd /opt/${{ env.APP_NAME }}
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            docker compose -f deploy/docker-compose.${{ env.ENVIRONMENT }}.yml down --remove-orphans || true
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            docker rmi ${{ env.DOCKER_IMAGE }} || true

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: |
            "${{ env.APP_NAME }}.tar.gz"
            "deploy/docker-compose.${{ env.ENVIRONMENT }}.yml"
            "deploy/.env"
            "deploy/deploy.sh"
            "deploy/nginx.conf"
            "deploy/env.${{ env.ENVIRONMENT }}"
          target: "/opt/${{ env.APP_NAME }}/"

      - name: Deploy with docker-compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /opt/${{ env.APP_NAME }}
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            chmod +x deploy/deploy.sh
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑
            docker load < ${{ env.APP_NAME }}.tar.gz
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å docker-compose
            docker compose -f deploy/docker-compose.${{ env.ENVIRONMENT }}.yml up -d
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            sleep 15
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            docker compose -f deploy/docker-compose.${{ env.ENVIRONMENT }}.yml ps
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check (–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            if [ "${{ env.ENVIRONMENT }}" = "staging" ]; then
              curl -f http://localhost:3001/health || echo "Health check failed"
            else
              curl -f http://localhost:3000/health || echo "Health check failed"
            fi
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            docker image prune -f
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            rm -f ${{ env.APP_NAME }}.tar.gz

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåç Environment: ${{ env.ENVIRONMENT }}"
            if [ "${{ env.ENVIRONMENT }}" = "staging" ]; then
              echo "üöÄ Application is available on internal port 3001"
              echo "üìù Configure nginx on server to proxy to localhost:3001"
            else
              echo "üöÄ Application is available on internal port 3000"
              echo "üìù Configure nginx on server to proxy to localhost:3000"
            fi
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
